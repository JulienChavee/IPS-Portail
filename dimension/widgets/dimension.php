<?php
/**
 * @brief		dimension Widget
 * @author		<a href='http://www.invisionpower.com'>Invision Power Services, Inc.</a>
 * @copyright	(c) 2001 - SVN_YYYY Invision Power Services, Inc.
 * @license		http://www.invisionpower.com/legal/standards/
 * @package		IPS Social Suite
 * @subpackage	dimension
 * @since		02 Aug 2015
 * @version		SVN_VERSION_NUMBER
 */

namespace IPS\dimension\widgets;

/* To prevent PHP errors (extending class does not exist) revealing path */
if ( !defined( '\IPS\SUITE_UNIQUE_KEY' ) )
{
	header( ( isset( $_SERVER['SERVER_PROTOCOL'] ) ? $_SERVER['SERVER_PROTOCOL'] : 'HTTP/1.0' ) . ' 403 Forbidden' );
	exit;
}

/**
 * dimension Widget
 */
class _dimension extends \IPS\Widget
{
	/**
	 * @brief	Widget Key
	 */
	public $key = 'dimension';
	
	/**
	 * @brief	App
	 */
	public $app = 'dimension';
		
	/**
	 * @brief	Plugin
	 */
	public $plugin = '';
	
	/**
	 * Initialise this widget
	 *
	 * @return void
	 */ 
	public function init()
	{
		// Use this to perform any set up and to assign a template that is not in the following format:
		// $this->template( array( \IPS\Theme::i()->getTemplate( 'widgets', $this->app, 'front' ), $this->key ) );
		// If you are creating a plugin, uncomment this line:
		// $this->template( array( \IPS\Theme::i()->getTemplate( 'plugins', 'core', 'global' ), $this->key ) );
		// And then create your template at located at plugins/<your plugin>/dev/html/dimension.phtml
		\IPS\Output::i()->cssFiles = array_merge( \IPS\Output::i()->cssFiles, \IPS\Theme::i()->css( 'dimension.css', 'dimension', 'front' ) );
		\IPS\Output::i()->jsFiles = array_merge( \IPS\Output::i()->jsFiles, \IPS\Output::i()->js( 'front_change.js', 'dimension', 'front' ) );
		parent::init();
	}
	
	/**
	 * Specify widget configuration
	 *
	 * @param	null|\IPS\Helpers\Form	$form	Form object
	 * @return	null|\IPS\Helpers\Form
	 */
	public function configuration( &$form=null )
	{
 		if ( $form === null )
		{
	 		$form = new \IPS\Helpers\Form;
 		}

 		//$form->add( new \IPS\Helpers\Form\Select( 'dimension_allowed_group', ( isset( $this->configuration['dimension_allowed_group'] ) === TRUE  ) ? ( $this->configuration['dimension_allowed_group'] !== NULL ) ? ( ( $this->configuration['dimension_allowed_group'] ===  '*' ) ? '*' : $this->configuration['dimension_allowed_group'] ) : NULL :  NULL, true, array( 'options' => \IPS\Member\Group::groups(), 'unlimited' => '*', 'multiple' => TRUE, 'sort' => TRUE, 'parse' => 'normal') ) );

 		//return $form;

 		// $$form->add( new \IPS\Helpers\Form\XXXX( .... ) );
 		// return $form;
 	} 
 	
 	 /**
 	 * Ran before saving widget configuration
 	 *
 	 * @param	array	$values	Values from form
 	 * @return	array
 	 */
 	public function preConfig( $values )
 	{
 		return $values;
 	}

	/**
	 * Render a widget
	 *
	 * @return	string
	 */
	public function render()
	{
		$allowed_group = \IPS\Settings::i()->dimension_allowed_group;

		if($allowed_group !== '*') {
			$allowed_group = explode( ',', $allowed_group );
			
			if( !\IPS\Member::loggedIn()->inGroup( $allowed_group ) )
				return '';
		}

		$fav = isset( \IPS\Request::i()->cookie['dimension_fav'] ) ? \IPS\Request::i()->cookie['dimension_fav'] : 1;

		$return = isset( \IPS\Request::i()->returnPortail ) ? \IPS\Request::i()->returnPortail : $fav;

		$portail = \IPS\Db::i()->select( '*', 'dimension_positionPortail', array( 'idPortail=?', $return ), 'id DESC' )->first();

		switch( $return ) {
			case 1:
				$name = "xelorium";
				break;

			case 2:
				$name = "srambad";
				break;

			case 3:
				$name = "enutrosor";
				break;

			case 4:
				$name = "ecaflipus";
				break;
		}

		return $this->output( $portail, $fav, $name, $return );

		// Use $this->output( $foo, $bar ); to return a string generated by the template set in init() or manually added via $widget->template( $callback );
		// Note you MUST route output through $this->output() rather than calling \IPS\Theme::i()->getTemplate() because of the way widgets are cached
	}
}